package com.ict.web.modules.sys.web;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.authz.annotation.RequiresUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.ict.web.commons.config.Global;
import com.ict.web.commons.web.BaseController;
import com.ict.web.modules.sys.entity.Menu;
import com.ict.web.modules.sys.service.AttachmentService;
import com.ict.web.modules.sys.service.account.SystemService;

@Controller
@RequestMapping(value = "sys/menu")
public class MenuController extends BaseController {

	@Autowired
	private SystemService systemService;
	@Autowired
	private AttachmentService attachmentService;

	@ModelAttribute("menu")
	public Menu get(@RequestParam(required = false) Long id) {
		if (id != null) {
			return systemService.getMenu(id);
		} else {
			return new Menu();
		}
	}

	@RequiresPermissions("sys:menu:view")
	@RequestMapping(value = { "list", "" })
	public String list(Model model) {
		List<Menu> list = Lists.newArrayList();
		List<Menu> sourcelist = systemService.findAllMenu();
		Menu.sortList(list, sourcelist, 1L);
		model.addAttribute("list", list);
		return "modules/sys/menuList";
	}

	@RequiresPermissions("sys:menu:view")
	@RequestMapping(value = "form")
	public String form(Menu menu, Model model) {
		if (menu.getParent() == null || menu.getParent().getId() == null) {
			menu.setParent(new Menu(1L));
		}
		menu.setParent(systemService.getMenu(menu.getParent().getId()));
		model.addAttribute("menu", menu);
		return "modules/sys/menuForm";
	}

	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "save")
	public String save(Menu menu, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request)
			throws IllegalStateException, IOException {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:/sys/menu/";
			// return "redirect:" + Global.getAdminPath() + "/sys/menu/";
		}
		if (!beanValidator(model, menu)) {
			return form(menu, model);
		}
		/******** 保存附件START ***********/
		// MultipartHttpServletRequest a = (MultipartHttpServletRequest)
		// request;
		// List<MultipartFile> files = a.getFiles("file");
		// List<Attachment> newattachs = attachmentService
		// .saveAllUploadFile(files);
		// if (newattachs != null && newattachs.size() > 0) {
		// List<Attachment> attchs = menu.getAttachmentList();
		// if (attchs == null) {
		// attchs = Lists.newArrayList();
		// }
		// attchs.addAll(newattachs);
		// menu.setAttachmentList(attchs);
		// }
		/******** 保存附件END ***********/
		systemService.saveMenu(menu);
		addMessage(redirectAttributes, "保存菜单'" + menu.getName() + "'成功");
		return "redirect:/sys/menu/";
	}

	// @RequiresPermissions("sys:menu:edit")
	// @RequestMapping(value = "deleteAttach")
	// public void deleteAttach(Long id, Long attId,
	// RedirectAttributes redirectAttributes, HttpServletResponse response)
	// throws IOException {
	// Menu menu = systemService.getMenu(id);
	// if (menu != null && menu.getId() != null) {
	// List<Attachment> attchs = menu.getAttachmentList();
	// if (attchs != null && attchs.size() > 0) {
	// for (Attachment att : attchs) {
	// if (att.getId() == attId) {
	// attchs.remove(att);
	// attachmentService.delete(attId);
	// break;
	// }
	// }
	// }
	// menu.setAttachmentList(attchs);
	// systemService.saveMenu(menu);
	// }
	// response.getWriter().write("true");
	// // return "true";
	// }

	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "delete")
	public String delete(Long id, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:/sys/menu/";
			// return "redirect:" + Global.getAdminPath() + "/sys/menu/";
		}
		if (Menu.isRoot(id)) {
			addMessage(redirectAttributes, "删除菜单失败, 不允许删除顶级菜单或编号为空");
		} else {
			systemService.deleteMenu(id);
			addMessage(redirectAttributes, "删除菜单成功");
		}
		return "redirect:/sys/menu/";
	}

	@RequiresUser
	@RequestMapping(value = "tree")
	public String tree() {
		return "modules/sys/menuTree";
	}

	/**
	 * 批量修改菜单排序
	 */
	@RequiresPermissions("sys:menu:edit")
	@RequestMapping(value = "updateSort")
	public String updateSort(Long[] ids, Float[] sorts,
			RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:/sys/menu/";
			// return "redirect:" + Global.getAdminPath() + "/sys/menu/";
		}
		int len = ids.length;
		Menu[] menus = new Menu[len];
		for (int i = 0; i < len; i++) {
			menus[i] = systemService.getMenu(ids[i]);
			menus[i].setSort(sorts[i].floatValue());
			systemService.saveMenu(menus[i]);
		}
		addMessage(redirectAttributes, "保存菜单排序成功!");
		return "redirect:/sys/menu/";
	}

	@RequiresUser
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(
			@RequestParam(required = false) Long extId,
			HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Menu> list = systemService.findAllMenu();
		for (int i = 0; i < list.size(); i++) {
			Menu e = list.get(i);
			if (extId == null
					|| (extId != null && !extId.equals(e.getId()) && e
							.getParentIds().indexOf("," + extId + ",") == -1)) {
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParent() != null ? e.getParent().getId()
						: 0);
				map.put("name", e.getName());
				mapList.add(map);
			}
		}
		return mapList;
	}
}
